{"version":3,"sources":["AutoComplete/AutoComplete.service.ts","AutoComplete/AutoComplete.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getSearchSuggestions","require","default","create","baseURL","timeout","headers","userQuery","console","log","AutoComplete","suggestions","controlClassnames","isLoading","cx","styles","control","search","_","debounce","select","e","prompt","target","className","wrapper","type","id","name","aria-label","onInput","value","map","suggestion","index","listItem","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAWaA,GAXCC,EAAQ,IAASC,QAEHC,OAAO,CACjCC,QAAS,4CACTC,QAAS,IACTC,QAAS,CACP,eAAgB,oCAChB,8BAA+B,OAIC,SAACC,GAmBnC,OAbAC,QAAQC,IAAI,cAAgBF,GAarB,CAAC,QAAS,a,wCCkBJG,EApCoC,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAC9CC,GAD2E,EAAhBC,UACvCC,IAAGC,IAAOC,QAAR,eACzBD,IAAOF,WAAY,KAGhBI,EAASC,IAAEC,SAASnB,EAAsB,KAM1CoB,EAAS,SAACC,GAEdC,OAAO,qBAAuBD,EAAEE,SAGlC,OACE,sBAAKC,UAAWT,IAAOU,QAAvB,UACE,sBAAKD,UAAWZ,EAAhB,UACE,uBAAOc,KAAK,SAASC,GAAG,eAAeC,KAAK,SAC1CC,aAAW,aAAaC,QAbZ,SAACT,GACnBJ,EAAOI,EAAEE,OAAOQ,UAaZ,+CAEF,qBAAKP,UAAU,OAAf,SACGb,GAAeA,EAAYqB,KAAI,SAACC,EAAoBC,GACnD,OACE,mBAAeV,UAAWT,IAAOoB,SAAUC,QAAShB,EAApD,SACGa,GADKC,Y,MCfLG,MAjBf,WAOE,OACE,sBAAKb,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,iCAGA,cAAC,EAAD,CAAcb,YAXF,CACd,MACA,MACA,SAQsCE,WAAW,QCJtCyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.90eb7fae.chunk.js","sourcesContent":["const axios = require('axios').default;\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://dry-cliffs-99602.herokuapp.com/api',\n  timeout: 1000,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Access-Control-Allow-Origin': '*',\n  }\n});\n\nexport const getSearchSuggestions = (userQuery: string): any => {\n  const params = {\n    q: userQuery,\n  }\n\n  let results: string[];\n  console.log('user query:' + userQuery);\n  // return axiosInstance({\n  //   method: 'get',\n  //   url: '/items',\n  //   params\n  // }).\n  // then((response: string[]) => {\n  //   results = response;\n  //   console.log('results', results);\n  //   return results;\n  // }).catch((e: object) => {\n  //   return ['error'];\n  // });\n  return ['false', 'results'];\n};\n","import cx from 'classnames';\n\nimport { getSearchSuggestions } from './AutoComplete.service';\nimport styles from './AutoComplete.scss';\nimport _ from 'lodash';\nimport React from 'react';\n\ninterface IAutoCompleteProps {\n  suggestions: string[];\n  isLoading: boolean;\n}\n\nconst AutoComplete: React.FC<IAutoCompleteProps> = ({ suggestions, isLoading }) => {\n  const controlClassnames = cx(styles.control, {\n    [styles.isLoading]: false,\n  }); \n\n  const search = _.debounce(getSearchSuggestions, 500);\n\n  const onUserInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    search(e.target.value);\n  }\n\n  const select = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n\n    prompt('You have selected ' + e.target);\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={controlClassnames}>\n        <input type=\"search\" id=\"search-input\" name=\"search\"\n          aria-label=\"Search Box\" onInput={onUserInput} />\n        <button>Search</button>\n      </div>\n      <div className='list'>\n        {suggestions && suggestions.map((suggestion: string, index: number): JSX.Element => {\n          return (\n            <a key={index} className={styles.listItem} onClick={select}>\n              {suggestion}\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default AutoComplete;","import React from 'react';\nimport logo from './logo.svg';\nimport AutoComplete from './AutoComplete/AutoComplete';\n\nimport './App.css';\n\nfunction App() {\n  const results = [\n    'one',\n    'two',\n    'three',\n  ]\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        AutoComplete Search\n      </header>\n      <AutoComplete suggestions={results} isLoading={true} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}